openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
tags:
  - name: users
    description: Các API liên quan đến user
paths:
  /users/login:
    post:
      tags:
        - users
      summary: Đăng nhập 
      description: Đăng nhập vào hệ thống
      operationId: login
      requestBody:
        description: Thông tin đăng nhập 
        content:
          application/json:
            schema: 
              $ref: '#components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Đăng nhập thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: Login success
                  result: 
                    $ref: '#components/schemas/SuccessAuthentication' 
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /users/me: 
    get: 
      tags:
        - users
      summary: Lấy thông tin user 
      description: Lấy thông tin user
      operationId: getMe
      security:
        - BearerAuth: []
      
      responses:
        default:
          description: Lấy thông tin user thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
components:
  schemas:
    LoginBody: 
      type: object
      properties:
        email:
          type: string
          example: lucbabys3@gmail.com
        password: 
          type: string
          example: luctieutu4!N
    SuccessAuthentication:
            type: object
            properties:
              access_token: 
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjYwMTdmNTdmNWVmMDJhYjg0MGM3ZWQxIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3MTIyNDA3NTYsImV4cCI6MTcxMjI0MTY1Nn0.v-sBPQFfObis-i3H3QK5h5xL2c29OiIWmFdYezNLKfU
              refresh_token: 
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjYwMTdmNTdmNWVmMDJhYjg0MGM3ZWQxIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MTIyNDA3NTYsImV4cCI6MTcyMDg4MDc1Nn0.OvqtWmCPThofee4PO3YMPmsnx8loMIFXJIkatSBpHNE
    User:
      type: object
      properties:
       _id:
         type: string
         format: MongoId
         example: "66017f57f5ef02ab840c7ed1"
       name:
         type: string
         example: "Lucss"
       email:
         type: string
         format: email
         example: "lucbabys3@gmail.com"
       date_of_birth:
         type: string
         format: ISO8601
         example: "2024-01-03T16:31:47.414Z"
       created_at:
         type: string
         format: ISO8601
         example: "2024-03-25T13:42:47.703Z"
       updated_at:
         type: string
         format: ISO8601
         example: "2024-03-25T13:43:20.706Z"
       verify:
         $ref: '#/components/schemas/UserVerifyStatus'
       twitter_circle:
         type: array
         items: 
           type: string
           format: MongoId
         example: []
       bio:
         type: string
         example: "I'm a software engineer."
       location:
         type: string
         example: "New York, USA"
       website:
         type: string
         example: "https://example.com"
       username:
         type: string
         example: "lucss"
       avatar:
         type: string
         example: "https://example.com/avatar.jpg"
       cover_photo:
         type: string
         example: "https://example.com/cover_photo.jpg"          
    UserVerifyStatus: 
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
  securitySchemes: 
    BearerAuth: 
       type: http
       scheme: bearer
       bearerFormat: JWT
  